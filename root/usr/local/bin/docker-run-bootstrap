#!/bin/sh

set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value

# Make all scripts executable
if [ -d /opt/docker/bin/ ]; then
    find /opt/docker/bin/ -type f -iname '*.sh' -print0 | xargs --no-run-if-empty -0 chmod +x
fi

# Enable usr-bin executables
if [ -d /opt/docker/bin/usr-bin ]; then
    find /opt/docker/bin/usr-bin -type f | while read USR_BIN_FILE; do
        chmod +x -- "$USR_BIN_FILE"
        ln -n -f -- "$USR_BIN_FILE" "/usr/local/bin/$(basename "$USR_BIN_FILE")"
    done
fi

# Bootstrap
if [ -d /opt/docker/provision/bootstrap.d ]; then
    while read FILE; do
        echo "-> Executing ${FILE}"

        # run custom scripts, only once
        . "$FILE"
        rm -f -- "$FILE"
    done < <(find /opt/docker/provision/bootstrap.d/ -name "*.sh")
fi


# build.d
if [ -d /opt/docker/provision/build.d ]; then
    while read FILE; do
        echo "-> Executing ${FILE}"

        # run custom scripts, only once
        . "$FILE"
        rm -f -- "$FILE"
    done < <(find /opt/docker/provision/build.d -name "*.sh")
fi

# bootstrap.d
if [ -d /bootstrap.d ]; then
    while read FILE; do
        echo "-> Executing ${FILE}"

        # run custom scripts, only once
        . "$FILE"
        rm -f -- "$FILE"
    done < <(find /bootstrap.d -name "*.sh")
fi

# build.d
if [ -d /build.d ]; then
    while read FILE; do
        echo "-> Executing ${FILE}"

        # run custom scripts, only once
        . "$FILE"
        rm -f -- "$FILE"
    done < <(find /build.d -name "*.sh")
fi